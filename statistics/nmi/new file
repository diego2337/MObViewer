####################################################################################
# Program to receive a .json file, a label, and write a vector containing all      #
# labels from instances of a dataset.                                              #
# Author: Diego Silva Cintra                                                       #
# Date: 13 February 2019                                                           #
####################################################################################
import argparse
import os
import sys
import json

if __name__ == "__main__":
	# Instantiate argument parser
    description = 'Program to receive a .json file, a label, and write a vector containing all labels from instances of a dataset.'
    parser = argparse.ArgumentParser(description=description)
    parser._action_groups.pop()

    # Add argument group (required)
    required = parser.add_argument_group('required arguments')
    required.add_argument('-f', '--file', required=True, dest='file', action='store', type=str, default=None, help='.json file representing bipartite graph.')
    required.add_argument('-l', '--label', required=True, dest='label', action='store', type=str, default=None, help='Label from bipartite graph to use as class.')
    # required.add_argument('-n', '--numberOfClasses', required=True, dest='numberOfClasses', action='store', type=str, default=None, help='Total number of classes from dataset.')

    # Add argument group (optional)
    optional = parser.add_argument_group('optional arguments')
    optional.add_argument('-o', '--output', required=False, dest='output', action='store', default='output', help='.txt filename output (just the name with no extension).')

    # Run parser
    options = parser.parse_args()

    # Step 1: Open files and load 'json' #
    graph = open(options.file, 'r')
    output = open(options.output + '.txt', 'w')
    jason = json.load(graph)

    # Step 2: Create a dictionary with total values for class #
    labels = dict()
    i = 0
    out = []
    for vertex in jason['nodes']:
    	if(options.label in vertex):
    		if(vertex[options.label] not in labels):
    			labels[vertex[options.label]] = i
    			i = i + 1
		out.append(labels[vertex[options.label]])
        
    # Step 3: Write and close files #
    output.write(str(out))
    graph.close()
    output.close()
